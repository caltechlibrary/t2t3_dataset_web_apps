
---- FIXME --- rewrite from here ---------------------------
# Mockup, wiring up our pages

- A standard web form that can submit objects to the JSON API
- a JavaScript module used to retrieve objects form the JSON API
- a JavaScript module per page to display the retrieved data

We can include mock up sample data view the before setting up our web service by opening the page directly in our web browser.


# Mock up, What would the web form look like?

We can use a single web form for both adding and editing recipes.

Example: [htdocs/edit_recipe.html](htdocs/edit_recipe.html)

This is our edit page so it should be named "edit_recipe.html" in the "htdocs" directory.


# Mock up, What how about displaying our recipe?

We can use an UL list to list the recipe by name and link to the display page.

Example: [htdocs/display_recipe.html](htdocs/display_recipe.html)

This is our display page so it should be named "display_recipe.html" in the "htdocs" directory.


# Behaviors, what actions are needed?

## CRUD-Q

- create a recipe (add)
- retrieve a recipe (display)
- update a recipes (edit)
- delete a recipe (left unimplemented)
- query our collection of recipes (list recipes)


# Behaviors, we can use JavaScript

- retrieve and drop data into our HTML pages
- handle form submission
- to create web components to simplify our HTML and make it more user friendly


# Behaviors, our web service and JSON API provides our data source

- `dataset` sets up our collection 
- `datasetd` provides our web service
- web service is defined using YAML


# Behaviors, create our collection

`dataset` is a command line tool for interacting with collections of JSON documents.

This will create our "recipes.ds" collection.

~~~shell
dataset init recipes.ds
~~~

Populate the collection with some test data, [download recipes.jsonl](recipes.jsonl).

~~~shell
dataset load recipes.ds <recipes.jsonl
~~~

---- FIXME: REWRITE rest of presentation

# Wiring things up, checkout the web service with your web browser

Fireup your web browser and try the following links.

- <http://localhost:8001/index.html>
- <http://localhost:8001/display_recipe.html>
- <http://localhost:8001/edit_recipe.html>

# Congratulations, you just implemented your application's web services

**Hurrah!!!**

The web service half of your application is completed.

# Remember your browser has "developer tools", given them a try

- With Firefox look at the "hamburger menu", click "more tools", click "web developer tools"
- Chrome, Safari have different menus, you'll need to find them

# Wiring things up, we use JavaScript and the JSON API to populate our pages

Create our "htdocs" and "htdocs/modules" directories.

~~~shell
mkdir htdocs
mkdir htdocs/modules
~~~

We will be creating the following files.

1. [htdocs/modules/list_recipes.js](htdocs/modules/list_recipes.js)
2. [htdocs/modules/display_recipe.js](htdocs/modules/display_recipe.js)
3. [htdocs/modules/edit_recipes.js](htdocs/modules/edit_recipe.js)

You can download them from <https://github.com/caltechlibrary/t2t3_dataset_web_apps> if you're following along.

# Wiring things up, No. 1a: List our recipes

- Our recipes are provided by our JSON API using the "query" we defined in our "recipe_api.yaml". 
- We can retrieve that using a JavaScript "fetch"
- We can then use the results to populate our index page

# Wiring things up. No. 1b: Our JSON API URL

The query api call requires a POST action. The URL <http://localhost:8001/api/recipes.ds/query/list_recipes>. Here is the brakedown the the URL path.

- `/api`, this indicates to our web service this is an API call
- `/recipes.ds`, indicates the collection we're working with
- `/query`, indicates we running a "query" (remember that from the YAML?)
- `/list_recipes` is the query name to run, parameters would come next if it needed them

# Wiring things up, No. 1c: Testing our JSON API

I use cURL and jq to test the JSON API. cURL provides a easy way to express the HTTP action, GET, POST, PUT, DELETE used in [RESTful](https://en.wikipedia.org/wiki/REST) JSON API.

~~~shell
curl -X POST http://localhost:8001/api/recipes.ds/query/list_recipes | jq .
~~~

# Wiring things up, No. 1d: Creating list_recipes.js, using "fetch"

We are going to create a JavaScript "module" caled "list_recipes.js". It's responsibilities are \--

- After page is loaded, get the elem holding our UL list ("recipe-list")
- then retrieve our list of recipes from the API
- populate the UL list using the retrieved object

See "modules" at [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)

NOTE: The script element should be of type "module".

# Wiring things up. No. 1e: 

Here's what [htdocs/list_recipes.js](htdocs/modules/list_recipes.js).


# Wiring things up, No. 2a: "display_recipe.js" behavior

We are going to create a JavaScript "module" caled "display_recipe.js". It's responsibilities are \--

- After page is loaded, get the "key" from the URL paramters
- then retrieve our recipe object from the API
- populate the page and update the navigation (edit element)

NOTE: We have more elements to adjust in the page otherwise the process is very similar to our index.html example.

# Wiring things up, No. 2b: "display_recipe.js" behavior



# Wiring things up, No. 3a: "edit_recipe.js" behaviors

- Needs to handle both "create" and "update"
- Can uses URL path distinguish between "create" and "update"
- For update will need to retrieve the current recipe to edit as JSON, then populate the form
- Will need to handle gathering the form elements and sending them to the JSON API to "create" or "update" the recipe


# Wiring things up, No. 3b: "edit_recipe.js" behaviors

Here's what [htdocs/edit_recipe.js](htdocs/modules/edit_recipe.js).

# Debugging

Work as a group

# Prototype

# Wait but this is ugly!

Yeah, this is only a prototype. Let's iterate on our implementation.

# Improving our application, vanilla CSS

~~~css
/* Example CSS, how minimal can we be? */
~~~

# Improving our application, leveraging web components

We can retrieve the following from [CL-web-components](https://github.com/caltechlibrary/CL-web-components)

- [a_to_z_ul.js]() -> htdocs/modules/a_to_z_ul.js
- [csvtextarea.js]() -> htdocs/modules/csvtextarea.js
- [sortable_table.js]() -> htdocs/modules/sortable_table.js

Now we can update our list, display and web form HTML with these components.

